@page "/fornecedores"
@inject HttpClient client
@inject IJSRuntime js

<h3>Fornecedores</h3>
<h6>Cadastrar novo fornecedor</h6>

<div class="form-group">
    <a class="btn btn-success" href="fornecedores/create"><i class="oi oi-plus"></i>Cadastrar</a>
</div>
<br />

@if (fornecedores == null)
{
    <text>Carregando...</text>
}
else if (fornecedores.Length == 0)
{
    <text>Nenhum registro encontrado</text>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Nome</th>
                <th>Responsavel</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Fornecedor forn in fornecedores)
            {
                <tr>
                    <td>@forn.NomeDaEmpresa</td>
                    <td>@forn.NomeResponsavel</td>

                    <td>
                        <a class="btn btn-success" href="fornecedores/edit/@forn.Id">Editar</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(forn.Id))">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    Fornecedor[] fornecedores { get; set; }
    protected override async Task OnInitializedAsync()
    {
        fornecedores = await client.GetFromJsonAsync<Fornecedor[]>("api/Fornecedores");
    }
    async Task Delete(int fornecedorId)
    {
        var forn = fornecedores.First(x => x.Id == fornecedorId);
        if (await js.InvokeAsync<bool>("confirm", $"Deseja excluir o fornecedor com o id: {forn.Id} ?")) ;
        {
            await client.DeleteAsync($"api/fornecedores/{fornecedorId}");
            await OnInitializedAsync();
        }
    }
}
