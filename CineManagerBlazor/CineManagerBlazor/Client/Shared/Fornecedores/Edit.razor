@page "/fornecedores/edit/{fornecedorId:int}"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

<h3>Editar</h3>
@if (forn != null) {
    <Form textoBotao="Atualizar" forn="forn" OnValidSubmit="@EditFornecedor"></Form>
}

@code {
    [Parameter] public int fornecedorId { get; set; }
    public List<Endereco> ListEndRemove { get; set; } = new List<Endereco>();
    public List<Telefone> ListTelRemove { get; set; } = new List<Telefone>();
    public List<Email> ListEmailRemove { get; set; } = new List<Email>();
    Fornecedor forn = new Fornecedor();
    Fornecedor fornBase = new Fornecedor();

    protected override async Task OnInitializedAsync() {
        forn = await http.GetFromJsonAsync<Fornecedor>($"api/fornecedores/{fornecedorId}");
        fornBase = await http.GetFromJsonAsync<Fornecedor>($"api/fornecedores/{fornecedorId}");
        if (ListEmailRemove.Count != 0) {
            ListEndRemove = forn.ListaEndereco;
        }
        ListTelRemove = forn.ListaTelefone;
        ListEmailRemove = forn.ListaEmail;
    }

    async Task EditFornecedor() {
        try {

            List<int> idEndRemove = new List<int>();
            List<int> idTelRemove = new List<int>();
            List<int> idEmailRemove = new List<int>();

            foreach(Endereco end in fornBase.ListaEndereco) {
                idEndRemove.Add(end.Id);
            }
            foreach(Telefone tel in fornBase.ListaTelefone) {
                idTelRemove.Add(tel.Id);
            }
            foreach(Email email in fornBase.ListaEmail) {
                idEmailRemove.Add(email.Id);
            }

            string EndRemove = String.Join(',', idEndRemove);
            string TelRemove = String.Join(',', idTelRemove);
            string EmailRemove = String.Join(',', idEmailRemove);
            AtualizarFornecedorDTO attForn = new AtualizarFornecedorDTO() {
                Fornecedor = forn,
                EndRemover = EndRemove,
                TelRemover = TelRemove,
                EmailRemover = EmailRemove
            };

            await http.PutAsJsonAsync($"api/fornecedores/{forn.Id}", attForn);
            await js.InvokeVoidAsync("alert", $"Fornecedor {forn.NomeDaEmpresa} atualizado com sucesso");
            uriHelper.NavigateTo("Fornecedores");
        } catch (Exception ex) {
            await js.InvokeVoidAsync("alert", "DEU RUIM");
        }
    }
}
