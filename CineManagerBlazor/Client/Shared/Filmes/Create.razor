@page "/filme/create"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject IFilmeRepos filmesRepo
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js


    <div class="row">
        <div class="form-group">
            <h3>Cadastrar um Filme</h3>
        </div>
    </div>

    @if (GenerosNaoSelecionados != null && TipoFilmes != null)
    {
        <Form textoBotao="Cadastrar" filme="@filme" OnValidSubmit="@CriarFilme" TipoFilmes="@TipoFilmes" GenerosNaoSelecionados="GenerosNaoSelecionados"></Form>
    }

    @code {
        Filme filme = new Filme();

        private List<Genero> GenerosNaoSelecionados;
        private List<TipoFilme> TipoFilmes;

        protected override async Task OnInitializedAsync()
        {
            GenerosNaoSelecionados = await http.GetFromJsonAsync<List<Genero>>("api/Generos");
            TipoFilmes = await http.GetFromJsonAsync<List<TipoFilme>>("api/TipoFilmes");
        }

        async Task CriarFilme()
        {
            try
            {
                if (DateTime.Compare(filme.EmCartazAte, filme.Lancamento) < 0)
                {
                    throw new Exception("A data de Lancamento não pode ser maior que a data de final da exibição! ");
                }

                if (filme.Generos.Count == 0)
                {
                    throw new Exception("É obrigatório pelo menos um Genero por filme!");
                }

                await filmesRepo.CriarFilme(filme);
                uriHelper.NavigateTo("Filmes");
            }
            catch (Exception ex)
            {
                await js.InvokeVoidAsync("alert", ex.Message);
            }
        }
    }
